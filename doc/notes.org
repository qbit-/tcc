* ALS of dense and decomposed tensors
  1. There is no difference between decomposing full tensor
     or its defining CPD decomposition, although there should be a
     large gain in speed for decomposed tensors.

* CPD of symmetric tensors
  1. A symmetrized tensor can have a rank which is larger than the
     rank of its unsymmetric part. For example, if the rank of the
     unsymmetric part is 3, the errors in the CPD decomposition of the
     symmetrized tensor with a guess having rank 3 are not small, thus
     the rank of symmetrized tensor may be larger than than the rank
     of the usymmetric part.
     
  2. Symmetrized factors, which produce symmetrized tensor
     exactly, preserve all their weights during nCPD ALS.  However, a
     random initial guess can have different weights and yield an
     exact decomposition. This shows that the form of CPD may not be
     unique if factors are no independent, as is in the case of
     symmetrized factors. Otherwise CPD is unique.

  3. The minimal rank of the symmetrized tensor may be smaller than
     the rank of its symmetrized CPD. For example, a symmetrized CPD
     can be rank 6 and yield the symmetrized tensor exactly, but there
     may exist an exact CPD of rank 4 of the same tensor.

* CPD and nCPD
  I spent a lot of effort to make the normalized CPD ALS work.
  Normalized CPD (nCPD) is t[i, .., n] = sum_{p} lam[p] * X1[i, p] *
  ... * Xn[n, p]), e.g. vector lam holds weights of the factors, which
  are normed to have unit columns.

  Here are the findings:

  1. With nCPD we can identify zero modes in the weight 
     vector (good). Zero modes occur presumably when the rank of nCPD
     is excessive, e.g. is higher than the maximal rank for a tensor
     of given dimensions.  Those modes are not easily seen in the
     usual CPD format.
     
  2. Lambdas can go negative themselves, but forcing them
     to stay positive does not hurt the algorithm.  The magnitude of
     lambdas is UNIQUE (good).

  3. Convergence of ALS slows down significanly as one approaches
     the true rank of the tensor. However, ALS seem to be pretty
     robust if given enough iterations

  4. nCPD code is much slower than CPD
* Energy in CPD-RCCSD/RCCSDT
  Energies in RCCSD/RCCSDT-CPD are quite sensitive to the
  symmetrizations are applied to different quantiities.  Currently, we
  symmetrize amplitudes, as well as the residuals. We feed symmetrized
  amplitudes into functions for calculation of residuals. This is
  slower than running residuals on the unsymmetrized amplitudes since
  the rank is much less in the latter case.
* Updates in CPD-RCCSD/CPD-RCCSDT
  CPD-RCCSD can not be solved using gradient updates, because CPD
  decompositions of R*D and T can not be done separately, those CPDs
  are not additive.  There is a dependence of every factor in ALS
  update on the updates of previous factors, hence we can not separate
  decompositions for two independent tensors (R*D and T). The whole
  procedure has to be done at once.
* Symmetry is crucial!
  Maintaining a proper symmetry of amplitude tensors is crucial in
  Coupled Cluster. Breaking of this symmetry leads to divergence! For
  example, CC expressions obtained from projecting \bar{H} agains
  unitary group generators are much more stable than the ones obtained
  by an unsymmetric projection and can be converged to lower numerical
  thresholds.
  
  In the context of CC-CPD those symmetries have to be maintained by
  symmetrizing CPD tensors.
* Idea about new method
  Rank constrained CC methods are good in strong correlation regime,
  but miss a lot of weak correlation. The positive effect of rank
  constraints in strong correlation regime lays in the fact that
  decomposed amplitudes are regularized, and hence only relevant
  excitations get more norm in CC ansatz. In contrast, when full
  amplitudes are used in CC, all excitations are treated equally at
  convergence, which results in overcorrelation, hence the norm is
  pumped into irrelevant excitations at the same scale as to the
  relevant ones. Hence, more correct wavefunction should not be a
  solution of residual equations, if residuals are defined as <1|
  \bar{H} |0> = r1 etc.
  
  What if we modify the residuals so that important correlations are
  emphasized? It can be done in the extended ansatz, e.g.  \bar{H} =
  exp(Z) exp(-T) H exp(T)

hence the idea of the method:

  - Solve normal CC with rank constraints. 
  - Set Z = T^{H}
  - Solve extended ansatz r1 = <1| exp(Z) exp(-T) H exp(T) | 0> etc
    with larger ranks, while keeping Z fixed.
  - If this won't break the solution, then set Z = T^{H}
    and increase rank again
  - Iterate until energy convergence for different ranks?

    UPDATE: This will likely lead just to ECCSD result at convergence
    (possibly with lower error?)  Solving for T improves right state,
    and solving for Z improves left state. However, the ultimate
    method should be hierarchical, and improve both sides (left and
    right) iteratively, e.g. it has to act somehow on e^{T}|0> as on a
    new reference.

* Another idea about new method
  After reading "A Canonical Transformation Theory from Extended
  Normal Ordering" from Chan and Yanai and combining with my and Tom's
  thoughts, here is another idea:
  
  Unsymmetric way:
  - Transform H with T: \bar{H} = exp(-T) H exp(T)
  - Solve for T from T = <2| \bar{H} |0>
  - Average \bar{H} to two body terms only
  - Repeat transformation
  - To avoid overfitting the use of low rank amplitudes is necessary here
    The rank should be Nelectron/2 (it was found that RCCSD never
    overcorrelates in this case)

  Symmetric way:
  - Transform H with T and Z: \dbar{H} = exp(Z) exp(-T) H exp(T) exp(-Z)
  - Average \dbar{H} to two body \dbar{H}2
  - Solve for T from T = <2| \dbar{H} |0> and for Z from Z = <0| \dbar{H} |2>
  - Repeat transformation
  - This can be done with full T and Z as ECC does not break in strong correlation regime.
    Tom says that truncating the number of bodies sequentially as
    \bar{H}2 = trunc(\hbar{H}) = trunc(exp(-T) H exp(T)) \dbar{H}2 =
    trunc(exp(Z) \bar{H}2 exp(-Z)) does not work well
* Triples
  As follows from the example code, residuals are never zero for
  triples in RCCSDT. This is possibly caused by the overdetermined
  equations for restricted triples.
  
  Two ways of solving RCCSDT were found to work, although it is still
  not clear which one is right.
 
  Residuals in RCCSDT are:
  
  < a b \bar{c} i^{+} j^{+} \bar{k}^{+} | \bar{H} | 0 > = R_{i j
  \bar{k}}^{a b \bar{c}} = RO

  R_{i j \bar{k}}^{a b \bar{c}} = G_{i j \bar{k}}^{a b \bar{c}} + D *
  (t_{i j k}^{a b c}
  - t_{j i k}^{a b c}) 
    
  Note that it is not possible to get t from RO, because RO only
  determines an antisymmetric part of t, but not the symmetric part.
  RO is the opposite spin residual. Same spin residuals (and
  amplitudes) can be obtained as follows (from Gus'es notes):
 
  RS_{i j \bar{k}}^{a b \bar{c}} = (RO_{i j \bar{k}}^{a b \bar{c}} +
  RO_{i \bar{k} j}^{a b \bar{c}}
  + RO_{\bar{k} i j }^{a b \bar{c}})

  TS_{i j \bar{k}}^{a b \bar{c}} = (TO_{i j \bar{k}}^{a b \bar{c}} +
  TO_{i \bar{k} j}^{a b \bar{c}}
  + TO_{\bar{k} i j}^{a b \bar{c}})

  TS and TO are antisymmetric, hence we can express TS through TO and
  entirely through t.
 
  Full unitary residual is: < E_{a}^{i} E_{b}^{j} E_{c}^{k} |
  \bar{H} | 0> = RU_{ijk}^{abc} = (2 * RS_{ijk}^{abc}
  + 2 * RO_{i j \bar{k}}^{ab \bar{c}} + 2 * RO_{i \bar{j} k}^{a \bar{b} c}
  + 2 * RO_{\bar{i} j k}^{\bar{a} b c}) = 2 * RS + 6 * RO (with proper permutations of indices)
    
  RU can be expressed completely through t. However, it seems that it
  is not possible to express t through RU, which is just a linear
  combination of RO. (underdetermined system?).
  
  t should have the following symmetries, due to the unitary group
  generators: t_{ijk}^{abc} = t_{jik}^{bac} = t_{jki}^{bca} =
  t_{kji}^{cba} = t_{kij}^{cab} = t_{ikj}^{acb} because \hat{t} =
  t_{ijk}^{abc} * E_{i}^{a} E_{j}^{b} E_{k}^{c} and E_{i}^{a}
  E_{j}^{b} = E_{j}^{b} E_{i}^{a}

  The way I solve for t is as follows. I write RU in terms of t
  (either through RO or directly using Drudge, which gives equivalent
  formulas).  RU_{ijk}^{abc} = GU_{ijk}^{abc} + D * (- 4 *
  t_{jik}^{abc} - 4 * t_{kji}^{abc} - 4 * t_{ikj}^{abc}
  + 2 * t_{kij}^{abc} + 2 * t_{jki}^{abc} + 8 * t_{ijk}^{abc}

  I then divide RU by 12 * D (number of t terms in the expression
  above), and symmetrize the result to have the symmetries of t
  required by the unitary group.  This leads to a stable RCCSDT, which
  gives energy higher then in Aquarius program, which does UCCSDT, but
  lower then RCCSD. I can not find a benchmark supporting the
  correctness of the procedure, though.
  
  If, however, I form from RO another combination, this also gives a
  stable algorithm.  This combination is: Ralt = RO_{ijk}^{abc} +
  RO_{jik}^{bac} + RO_{jki}^{bca} + RO_{kji}^{cba} + RO_{kij}^{cab} +
  RO_{ikj}^{acb} (e.g. apply symmetries of t to RO). Note that RU =
  Ralt + 2 * RS e.g. Ralt is a part of RU without same spin
  components. If this residual is divided by 6 * D (the number of
  terms t in the expression) and symmetrized to have the symmetries of
  of t, then the resulting procedure yeilds energy coinciding up to 7
  digits with So Hirata's CCSDT benchmark on his website. This energy
  is lower then what a procedure with full RU residual yeilds, and it
  feels that full RU is more correct.

  
* Residuals of triples
  Residuals in RCCSDT are not zero. This is very much related to the
  symmetry of the underlying tensors. Aparently, T3 equations are
  overdetermined, and only a symmetric part of the residual makes
  sense.

  If we stick with totally antisymmetric T3, then the norm of final T3
  residual is not zero, but it's antisymmetric part is.  The energy,
  however, is much higher than is should be - in effect by making T3
  antisymmetric we forget about spin labels and treat all particles as
  spinless fermions in triple excitations.

  Let us spreading this thought to the symmetry of T3 in RCCSDT, which
  has only n_body symmetry. It should be true that only an n-body
  symmetric part of the residual should matter. A residual is a
  derivative with respect to the amplitude, and if the amplitude is
  symmetric, it should be symmetrized as well. This should lead to
  very stable CC codes which avoid divergence due to error
  accumulation in the symmetry part of the aplitudes which CC
  equations do not care about (and hence are not contracting that
  error).
  
  Lastly let us talk about two different kinds of RCCSDT ("opposite spin" and
  unit residual based, see the code).
  The residual is not zero (even its symmetric part) in both cases. I suspect
  that the first version ("opposite spin") corresponds to UCCSDT, while 
  the unit residual based version is a correct RCCSDT. At convergence 
  the residual is much less in the "opposite spin" version, but is still far 
  from zero. Possibly this is true due to the fact that UCCSDT has more 
  degrees of freedom (and we solve only for the (alpha alpha beta) amplitudes).
  In GCCSDT (which includes all degrees of freedom),
  the residual would be zero for all blocks as we have seen in the case of 
  antisymmetric T3
