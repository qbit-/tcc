* ALS of dense and decomposed tensors
  1. There is no difference between decomposing full tensor
     or its defining CPD decomposition, although there should be
     a large gain in speed for decomposed tensors. 

* CPD of symmetric tensors
  1. A symmetrized tensor can have a rank which is larger than the
     rank of its unsymmetric part. For example, if the rank of the
     unsymmetric part is 3, the errors in the CPD decomposition
     of the symmetrized tensor with a guess having rank 3 are not small,
     thus the rank of symmetrized tensor may be larger than
     than the rank of the usymmetric part.
     
  2. Symmetrized factors, which produce symmetrized tensor
     exactly, preserve all their weights during nCPD ALS.
     However, a random initial guess can have different weights
     and yield an exact decomposition. This shows that the form
     of CPD may not be unique if factors are no independent, as is
     in the case of symmetrized factors. Otherwise CPD is unique.

  3. The minimal rank of the symmetrized tensor may be smaller than
     the rank of its symmetrized CPD. For example, a symmetrized
     CPD can be rank 6 and yield the symmetrized tensor exactly, but
     there may exist an exact CPD of rank 4 of the same tensor.

* CPD and nCPD
  I spent a lot of effort to make the normalized CPD ALS work.
  Normalized CPD (nCPD) is 
  t[i, .., n] = sum_{p} lam[p] * X1[i, p] * ... * Xn[n, p]), 
  e.g. vector lam holds weights of the factors, which are normed
  to have unit columns.

  Here are the findings:

  1. With nCPD we can identify zero modes in the weight 
     vector (good). Zero modes occur presumably when the rank
     of nCPD is excessive, e.g. is higher than the maximal rank
     for a tensor of given dimensions.
     Those modes are not easily seen in the usual CPD format.
     
  2. Lambdas can go negative themselves, but forcing them
     to stay positive does not hurt the algorithm. 
     The magnitude of lambdas is UNIQUE (good). 

  3. Convergence of ALS slows down significanly as one approaches
     the true rank of the tensor. However, ALS seem to be 
     pretty robust if given enough iterations

  4. nCPD code is much slower than CPD
* Energy in CPD-RCCSD/RCCSDT
  Energies in RCCSD/RCCSDT-CPD are quite sensitive to 
  the symmetrizations are applied to different quantiities. 
  Currently, we symmetrize amplitudes, as well as 
  the residuals. We feed symmetrized amplitudes into
  functions for calculation of residuals. This is slower
  than running residuals on the unsymmetrized amplitudes
  since the rank is much less in the latter case.
* Updates in CPD-RCCSD/CPD-RCCSDT
  CPD-RCCSD can not be solved using gradient updates, 
  because CPD decompositions of R*D and T can not be 
  done separately, those CPDs are not additive. 
  There is a dependence of every factor in ALS 
  update on the updates of previous factors, hence 
  we can not separate decompositions for two independent 
  tensors (R*D and T). The whole procedure has to be done 
  at once.
* Symmetry is crucial!
  Maintaining a proper symmetry of amplitude tensors 
  is crucial in Coupled Cluster. Breaking of this symmetry
  leads to divergence! For example, CC expressions obtained
  from projecting \bar{H} agains unitary group generators 
  are much more stable than the ones obtained by an 
  unsymmetric projection and can be converged to lower 
  numerical thresholds. 
  
  In the context of CC-CPD those symmetries have to be maintained 
  by symmetrizing CPD tensors.
* Idea about new method
  Rank constrained CC methods are good in 
  strong correlation regime, but miss a lot of 
  weak correlation. The positive effect of 
  rank constraints in strong correlation regime 
  lays in the fact that decomposed amplitudes are
  regularized, and hence only relevant 
  excitations get more norm in CC ansatz. In contrast,
  when full amplitudes are used in CC, all excitations 
  are treated equally at convergence, which results in 
  overcorrelation, hence the norm is pumped into 
  irrelevant excitations at the same scale as to the 
  relevant ones. Hence, more correct wavefunction 
  should not be a solution of residual equations, 
  if residuals are defined as <1| \bar{H} |0> = r1 etc.
  
  What if we modify the residuals so that important 
  correlations are emphasized? It can be done in the
  extended ansatz, e.g.
  \bar{H} = exp(Z) exp(-T) H exp(T)

hence the idea of the method:

  - Solve normal CC with rank constraints. 
  - Set Z = T^{H}
  - Solve extended ansatz r1 = <1| exp(Z) exp(-T) H exp(T) | 0> etc
    with larger ranks, while keeping Z fixed.
  - If this won't break the solution, then set Z = T^{H}
    and increase rank again
  - Iterate until energy convergence for different ranks?

    UPDATE: This will likely lead just to ECCSD result at convergence
    (possibly with lower error?)
    Solving for T improves right state, and solving for Z
    improves left state. However, the ultimate method should
    be hierarchical, and improve both sides (left and right) iteratively,
    e.g. it has to act somehow on e^{T}|0> as on a new reference.

* Another idea about new method
  After reading "A Canonical Transformation Theory from Extended Normal Ordering"
  from Chan and Yanai and combining with my and Tom's thoughts, here is another idea:
  
  Unsymmetric way:
  - Transform H with T: \bar{H} = exp(-T) H exp(T)
  - Solve for T from T = <2| \bar{H} |0>
  - Average \bar{H} to two body terms only
  - Repeat transformation
  - To avoid overfitting the use of low rank amplitudes is necessary here
    The rank should be Nelectron/2 (it was found that RCCSD never overcorrelates
    in this case)

  Symmetric way:
  - Transform H with T and Z: \dbar{H} = exp(Z) exp(-T) H exp(T) exp(-Z)
  - Average \dbar{H} to two body \dbar{H}2
  - Solve for T from T = <2| \dbar{H} |0> and for Z from Z = <0| \dbar{H} |2>
  - Repeat transformation
  - This can be done with full T and Z as ECC does not break in strong correlation regime.
    Tom says that truncating the number of bodies 
    sequentially as \bar{H}2 = trunc(\hbar{H}) = trunc(exp(-T) H exp(T))
    \dbar{H}2 = trunc(exp(Z) \bar{H}2 exp(-Z)) does not work well
